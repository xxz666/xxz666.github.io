{"pages":[{"title":"about me","text":"","link":"/about/index.html"}],"posts":[{"title":"爬取QQ群成员的信息","text":"","link":"/2019/11/19/%E7%88%AC%E5%8F%96QQ%E7%BE%A4%E6%88%90%E5%91%98%E7%9A%84%E4%BF%A1%E6%81%AF/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/10/26/hello-world/"},{"title":"关于python的一些学习","text":"注：首先声明，在这文章只是平时的学习笔记，用于加深记忆以及以后方便查找的功能。 1.一些基本的常识python的一些基本语法结构要比c++简单的多，而且写起来很方便，没有像c++那么多的限制，有了一些c++的基础学起来相对容易一些： 关于编译器 ，如果不进行大型的项目，直接创建一个py结尾的文件即可编写python代码，如果运行一些比较大的项目，应该需要下载pychram，这个编译器用起来方便一些，应该需要花钱，但是网上也有一些破解版和汉化的软件，很简单就可以查找到； 和以前学的c++的差别，用了几天感觉差别还是有一些，但是不得不说python是比较方便的软件，而且相比c++代码量比较少，只举一个例子，比如说创建一个函数： 用python 12345678910def func(n): if n==1: return 1 elif n==2: return 1 else: return func(n-1)+func(n-2)n=int(input('请输入一个数; '))result=func(n)print('%d 的斐波那契函数为 %d' %(n,result)) 用c++ 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;int func(int i){ if(i==1||i==2) { return 1; } else { return func(i-1)+func(i-2); }};int main(){ int i,result; cout&lt;&lt;\"请输入一个数: \"; cin&gt;&gt;i; result=func(i); cout&lt;&lt; i &lt;&lt;\"的斐波那契函数为：\"&lt;&lt;result&lt;&lt;endl; return 0;} 结果很显然，同样是用递归实现一个斐波那契函数，代码量还是差很多的，关于函数和类的封装继承和多态区别还是有的，但是不大，接下来介绍一个python非常适用的领域爬虫。 2.模拟有道词典实现单词的翻译（爬虫）12345678910111213141516171819202122232425import urllib.requestimport urllib.parseimport json #轻量级的数据交换模式num=input('请输入要翻译的内容：')url='http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'data={}data['i']= numdata['from']= 'AUTO'data['to']='AUTO'data['smartresult']= 'dict'data['client']= 'fanyideskweb'data['salt']= '15727641027462'data['sign']= '13305999ab8cf444f7ddbc11b62baffd'data['ts']= '1572764102746'data['bv']= '7d4ac98e0e04505e57a74dd5992cc541'data['doctype']= 'json'data['version']= '2.1'data['keyfrom']= 'fanyi.web'data['action']= 'FY_BY_CLICKBUTTION'data=urllib.parse.urlencode(data).encode('utf-8')response=urllib.request.urlopen(url,data)html=response.read().decode('utf-8')a=json.loads(html)b=a['translateResult'][0][0]['tgt']print('翻译结果为: %s' %b) 其中 url='http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'表示所爬取的链接地址，data 代表了一个字典，存放了各种数据。这些都是从有道的网页后台所爬取的。最后根据你输入的内容即可翻译出相应的结果。 连载中，还在学习中。。。","link":"/2019/11/09/%E5%85%B3%E4%BA%8Epython%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/"},{"title":"在测试vf","text":"关于该博客的说明 该博客是2019年10月份搭建，并托管于GitHub。该博客仅用于个人学习使用，我会将学习中解决的问题发到这里，可能会借鉴其他大佬的解决方案，但是我保证仅用于个人学习使用。为何使用自己搭建的博客，而不使用一些像csdn那些博客？我感觉通过搭建博客的过程学习到了很多知识，不仅可以写博客，还可以了解到一些底层的知识（包括整个搭建过程、主题的配置与改进），何乐而不为？","link":"/2020/01/28/%E5%9C%A8%E6%B5%8B%E8%AF%95vf/"},{"title":"关于 x 绝对值的光滑函数","text":"首先声明，文章只是平时的学习笔记，用于加深记忆以及以后方便查找的功能。 1、关于 $|x|$ 的第一个光滑函数定义一个函数 $\\phi: R^2 \\rightarrow R$ 满足$$\\phi(\\mu,x)=\\sqrt{\\mu^{2}+x^{2}}$$ 3.csdcsd3.csdcsd3.csdcsd 由于 $|x|$ 本身是不光滑的，但是对于 $\\phi(\\mu,x)$ 来说，该函数在 $(\\mu, x) \\in {R_{++}\\times R}$ 是连续可微的，并且满足对于任给的 $x \\in R$ 有 $\\lim \\limits _{\\mu \\rightarrow 0} \\phi(\\mu, x)=|x|$ 成立，从而我们可以利用 $\\phi(\\mu,x)$ 来把 $|x|$ 光滑化，那么原来的 $|x|$ 是不可求导的变成了可求导 $\\phi(\\mu,x)$，就会有很多良好的性质。 2、关于 $|x|$ 的第二个光滑函数这种处理办法比较巧妙，我们知道$$\\max{x,0}=\\frac{|x|+x}{2}$$通过解这个方程我们可以得到$$|x|=2\\max{x,0}-x$$对于 $\\max{x,0}$ 我们可以选取它的光滑逼近函数$\\psi(\\mu,x) : R^2 \\rightarrow R$$$\\psi(\\mu, x)=\\mu\\ln(1+e^{\\frac{x}{\\mu}})$$对于这个函数的构造很好理解，只要 $\\mu$ 足够小以至于 $1+e^{\\frac{x}{\\mu}}$ 可以近似的等于 $e^{\\frac{x}{\\mu}}$ 那么 $$\\psi(\\mu, x)=|x|$$可以利用以下的 matlab 代码去实现该函数 $\\psi(\\mu,x)$ 1234x=input(&apos;请输入 x=&apos;);a=0.01; %不能取太小, 否则exp(1/a)会很大，导致MATLAB无法显示f=a*log(1+exp(x/a));fprintf(&apos;0 与 %6.4d 的最大者为:%6.4d\\n&apos;,x,f); 做好的最大值的光滑逼近，那么$$|x|=2\\max{x,0}-x=2\\psi(\\mu,x)-x=2\\mu\\ln(1+e^{\\frac{x}{\\mu}})-x$$其中 $\\mu$ 为一个任意小的正实数。 1.csdcsd通过以上的两种方式可以对 $|x|$ 进行光滑化，对于一些方程的求解是很有帮助的。","link":"/2019/10/29/%E5%85%B3%E4%BA%8Ex%E7%BB%9D%E5%AF%B9%E5%80%BC%E7%9A%84%E5%85%89%E6%BB%91%E5%87%BD%E6%95%B0/"}],"tags":[{"name":"编程","slug":"编程","link":"/tags/%E7%BC%96%E7%A8%8B/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"}],"categories":[{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"}]}